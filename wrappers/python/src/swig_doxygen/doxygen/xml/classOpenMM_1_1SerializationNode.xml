<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="classOpenMM_1_1SerializationNode" kind="class" prot="public">
    <compoundname>OpenMM::SerializationNode</compoundname>
    <includes refid="SerializationNode_8h" local="no">SerializationNode.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classOpenMM_1_1SerializationNode_1a1464f81416e0198d5dbdbe797a9e7b4e" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string OpenMM::SerializationNode::name</definition>
        <argsstring></argsstring>
        <name>name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rmcgibbo/OpenMM5.0-Source/serialization/include/openmm/serialization/SerializationNode.h" line="222" bodyfile="/home/rmcgibbo/OpenMM5.0-Source/serialization/include/openmm/serialization/SerializationNode.h" bodystart="222" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOpenMM_1_1SerializationNode_1a4a094ba7f372257a8919573ca83599e5" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classOpenMM_1_1SerializationNode" kindref="compound">SerializationNode</ref> &gt;</type>
        <definition>std::vector&lt;SerializationNode&gt; OpenMM::SerializationNode::children</definition>
        <argsstring></argsstring>
        <name>children</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rmcgibbo/OpenMM5.0-Source/serialization/include/openmm/serialization/SerializationNode.h" line="223" bodyfile="/home/rmcgibbo/OpenMM5.0-Source/serialization/include/openmm/serialization/SerializationNode.h" bodystart="223" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classOpenMM_1_1SerializationNode_1a28651cda43285820f0bc7ba90afae20f" prot="private" static="no" mutable="no">
        <type>std::map&lt; std::string, std::string &gt;</type>
        <definition>std::map&lt;std::string, std::string&gt; OpenMM::SerializationNode::properties</definition>
        <argsstring></argsstring>
        <name>properties</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rmcgibbo/OpenMM5.0-Source/serialization/include/openmm/serialization/SerializationNode.h" line="224" bodyfile="/home/rmcgibbo/OpenMM5.0-Source/serialization/include/openmm/serialization/SerializationNode.h" bodystart="224" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classOpenMM_1_1SerializationNode_1a2b4a293e5c58261bc1d5a98678193a8c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string&amp; OpenMM::SerializationNode::getName</definition>
        <argsstring>() const </argsstring>
        <name>getName</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the name of this <ref refid="classOpenMM_1_1SerializationNode" kindref="compound">SerializationNode</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rmcgibbo/OpenMM5.0-Source/serialization/include/openmm/serialization/SerializationNode.h" line="72"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1SerializationNode_1a6b53c72513bb4a5e0a68d2031361d0f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenMM::SerializationNode::setName</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>setName</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the name of this <ref refid="classOpenMM_1_1SerializationNode" kindref="compound">SerializationNode</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the new name of the <ref refid="classOpenMM_1_1SerializationNode" kindref="compound">SerializationNode</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rmcgibbo/OpenMM5.0-Source/serialization/include/openmm/serialization/SerializationNode.h" line="78"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1SerializationNode_1a7ce9dddfca49970a368217d782740dbf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::vector&lt; <ref refid="classOpenMM_1_1SerializationNode" kindref="compound">SerializationNode</ref> &gt; &amp;</type>
        <definition>const std::vector&lt;SerializationNode&gt;&amp; OpenMM::SerializationNode::getChildren</definition>
        <argsstring>() const </argsstring>
        <name>getChildren</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a reference to this node&apos;s child nodes. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rmcgibbo/OpenMM5.0-Source/serialization/include/openmm/serialization/SerializationNode.h" line="82"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1SerializationNode_1abfce47d99c0a3db743ac762910269632" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classOpenMM_1_1SerializationNode" kindref="compound">SerializationNode</ref> &gt; &amp;</type>
        <definition>std::vector&lt;SerializationNode&gt;&amp; OpenMM::SerializationNode::getChildren</definition>
        <argsstring>()</argsstring>
        <name>getChildren</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a reference to this node&apos;s child nodes. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rmcgibbo/OpenMM5.0-Source/serialization/include/openmm/serialization/SerializationNode.h" line="86"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1SerializationNode_1a580548cc82487cadee365c1583d3f980" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classOpenMM_1_1SerializationNode" kindref="compound">SerializationNode</ref> &amp;</type>
        <definition>const SerializationNode&amp; OpenMM::SerializationNode::getChildNode</definition>
        <argsstring>(const std::string &amp;name) const </argsstring>
        <name>getChildNode</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a reference to the child node with a particular name. If there is no child with the specified name, this throws an exception.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>the</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the child node to get </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rmcgibbo/OpenMM5.0-Source/serialization/include/openmm/serialization/SerializationNode.h" line="93"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1SerializationNode_1a68794ac3f4d0aff826d7dcfb38faf289" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classOpenMM_1_1SerializationNode" kindref="compound">SerializationNode</ref> &amp;</type>
        <definition>SerializationNode&amp; OpenMM::SerializationNode::getChildNode</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>getChildNode</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a reference to the child node with a particular name. If there is no child with the specified name, this throws an exception.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>the</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the child node to get </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rmcgibbo/OpenMM5.0-Source/serialization/include/openmm/serialization/SerializationNode.h" line="100"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1SerializationNode_1a20f3420eda88506cfc718d79fc72abcf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::map&lt; std::string, std::string &gt; &amp;</type>
        <definition>const std::map&lt;std::string, std::string&gt;&amp; OpenMM::SerializationNode::getProperties</definition>
        <argsstring>() const </argsstring>
        <name>getProperties</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a map containing all of this node&apos;s properties. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rmcgibbo/OpenMM5.0-Source/serialization/include/openmm/serialization/SerializationNode.h" line="104"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1SerializationNode_1ab87e408327c854ee59601ca1849049d4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool OpenMM::SerializationNode::hasProperty</definition>
        <argsstring>(const std::string &amp;name) const </argsstring>
        <name>hasProperty</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determine whether this node has a property with a particular node.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>the</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the property to check for </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rmcgibbo/OpenMM5.0-Source/serialization/include/openmm/serialization/SerializationNode.h" line="110"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1SerializationNode_1a4a7748a8b334970023b22dd24dd3a943" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string&amp; OpenMM::SerializationNode::getStringProperty</definition>
        <argsstring>(const std::string &amp;name) const </argsstring>
        <name>getStringProperty</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the property with a particular name, specified as a string. If there is no property with the specified name, an exception is thrown.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the property to get </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rmcgibbo/OpenMM5.0-Source/serialization/include/openmm/serialization/SerializationNode.h" line="117"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1SerializationNode_1ad418a0a871e724c9a0058b378f54eef8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string&amp; OpenMM::SerializationNode::getStringProperty</definition>
        <argsstring>(const std::string &amp;name, const std::string &amp;defaultValue) const </argsstring>
        <name>getStringProperty</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>defaultValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the property with a particular name, specified as a string. If there is no property with the specified name, a default value is returned instead.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the property to get </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>defaultValue</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to return if the specified property does not exist </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rmcgibbo/OpenMM5.0-Source/serialization/include/openmm/serialization/SerializationNode.h" line="125"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1SerializationNode_1ab7c1b2f63a936c5bfd6b8282387936ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classOpenMM_1_1SerializationNode" kindref="compound">SerializationNode</ref> &amp;</type>
        <definition>SerializationNode&amp; OpenMM::SerializationNode::setStringProperty</definition>
        <argsstring>(const std::string &amp;name, const std::string &amp;value)</argsstring>
        <name>setStringProperty</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the value of a property, specified as a string.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the property to set </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to set for the property </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rmcgibbo/OpenMM5.0-Source/serialization/include/openmm/serialization/SerializationNode.h" line="132"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1SerializationNode_1aa8a256ca9a681010ad612b0e98281330" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int OpenMM::SerializationNode::getIntProperty</definition>
        <argsstring>(const std::string &amp;name) const </argsstring>
        <name>getIntProperty</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the property with a particular name, specified as an int. If there is no property with the specified name, an exception is thrown.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the property to get </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rmcgibbo/OpenMM5.0-Source/serialization/include/openmm/serialization/SerializationNode.h" line="139"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1SerializationNode_1a8fef8c00a1bf99f8ce99fa2ef798d306" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int OpenMM::SerializationNode::getIntProperty</definition>
        <argsstring>(const std::string &amp;name, int defaultValue) const </argsstring>
        <name>getIntProperty</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>defaultValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the property with a particular name, specified as an int. If there is no property with the specified name, a default value is returned instead.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the property to get </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>defaultValue</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to return if the specified property does not exist </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rmcgibbo/OpenMM5.0-Source/serialization/include/openmm/serialization/SerializationNode.h" line="147"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1SerializationNode_1a80ae9475ab08f6b101c4ef061514d7d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classOpenMM_1_1SerializationNode" kindref="compound">SerializationNode</ref> &amp;</type>
        <definition>SerializationNode&amp; OpenMM::SerializationNode::setIntProperty</definition>
        <argsstring>(const std::string &amp;name, int value)</argsstring>
        <name>setIntProperty</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the value of a property, specified as an int.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the property to set </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to set for the property </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rmcgibbo/OpenMM5.0-Source/serialization/include/openmm/serialization/SerializationNode.h" line="154"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1SerializationNode_1a79508cdfb45a9c65ecb4baa4d2413ce7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double OpenMM::SerializationNode::getDoubleProperty</definition>
        <argsstring>(const std::string &amp;name) const </argsstring>
        <name>getDoubleProperty</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the property with a particular name, specified as a double. If there is no property with the specified name, an exception is thrown.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the property to get </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rmcgibbo/OpenMM5.0-Source/serialization/include/openmm/serialization/SerializationNode.h" line="161"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1SerializationNode_1afdded9db4392fbe16e4b8bb07c98b7e7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double OpenMM::SerializationNode::getDoubleProperty</definition>
        <argsstring>(const std::string &amp;name, double defaultValue) const </argsstring>
        <name>getDoubleProperty</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>double</type>
          <declname>defaultValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the property with a particular name, specified as a double. If there is no property with the specified name, a default value is returned instead.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the property to get </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>defaultValue</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to return if the specified property does not exist </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rmcgibbo/OpenMM5.0-Source/serialization/include/openmm/serialization/SerializationNode.h" line="169"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1SerializationNode_1a434ed1c3d10d141a9af26edf70a39252" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classOpenMM_1_1SerializationNode" kindref="compound">SerializationNode</ref> &amp;</type>
        <definition>SerializationNode&amp; OpenMM::SerializationNode::setDoubleProperty</definition>
        <argsstring>(const std::string &amp;name, double value)</argsstring>
        <name>setDoubleProperty</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the value of a property, specified as a double.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the property to set </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to set for the property </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rmcgibbo/OpenMM5.0-Source/serialization/include/openmm/serialization/SerializationNode.h" line="176"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1SerializationNode_1a8cd28cb1637d6347438e46a6122bd1af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classOpenMM_1_1SerializationNode" kindref="compound">SerializationNode</ref> &amp;</type>
        <definition>SerializationNode&amp; OpenMM::SerializationNode::createChildNode</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>createChildNode</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new child node</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the new node to create </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a reference to the newly created node </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rmcgibbo/OpenMM5.0-Source/serialization/include/openmm/serialization/SerializationNode.h" line="183"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1SerializationNode_1a7b6840a9c320a7f44f10bd8f7bbbcd8a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classOpenMM_1_1SerializationNode" kindref="compound">SerializationNode</ref> &amp;</type>
        <definition>SerializationNode&amp; OpenMM::SerializationNode::createChildNode</definition>
        <argsstring>(const std::string &amp;name, const T *object)</argsstring>
        <name>createChildNode</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const T *</type>
          <declname>object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new child node by serializing an object. A <ref refid="classOpenMM_1_1SerializationProxy" kindref="compound">SerializationProxy</ref> is automatically selected based on the object&apos;s type, then invoked to populate the newly created node.</para><para>Note that, while this method is templatized based on the type of object being serialized, the typeid() operator is used to select the proxy. This means the template argument may be a base class, and the correct proxies will still be selected for objects of different subclasses.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the new node to create </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to the object to serialize </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a reference to the newly created node </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rmcgibbo/OpenMM5.0-Source/serialization/include/openmm/serialization/SerializationNode.h" line="198" bodyfile="/home/rmcgibbo/OpenMM5.0-Source/serialization/include/openmm/serialization/SerializationNode.h" bodystart="198" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="classOpenMM_1_1SerializationNode_1a26c70a738d948aa14d02c0ab8b5ef86b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T *</type>
        <definition>T* OpenMM::SerializationNode::decodeObject</definition>
        <argsstring>() const </argsstring>
        <name>decodeObject</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reconstruct an object based on the information stored in this node. A <ref refid="classOpenMM_1_1SerializationProxy" kindref="compound">SerializationProxy</ref> is automatically selected based on the information stored in the node, then it is invoked to create the object.</para><para>The template parameter may be either the actual type of the object, or any base class to which it may be cast.</para><para><simplesect kind="return"><para>a pointer to the newly created object. The caller assumes ownership of the object. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rmcgibbo/OpenMM5.0-Source/serialization/include/openmm/serialization/SerializationNode.h" line="218" bodyfile="/home/rmcgibbo/OpenMM5.0-Source/serialization/include/openmm/serialization/SerializationNode.h" bodystart="218" bodyend="220"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>A <ref refid="classOpenMM_1_1SerializationNode" kindref="compound">SerializationNode</ref> stores information about an object during serialization or deserialization.</para><para>When an object is serialized, its <ref refid="classOpenMM_1_1SerializationProxy" kindref="compound">SerializationProxy</ref> is first called to copy information about the object into a <ref refid="classOpenMM_1_1SerializationNode" kindref="compound">SerializationNode</ref>. That information can then be written to the output stream in the desired format.</para><para>When an object is deserialized, the input stream is read and the information is stored into a <ref refid="classOpenMM_1_1SerializationNode" kindref="compound">SerializationNode</ref>. The appropriate <ref refid="classOpenMM_1_1SerializationProxy" kindref="compound">SerializationProxy</ref> is then called to reconstruct the object.</para><para>SerializationNodes are arranged in a tree. There will often be a one-to-one correspondence between objects and SerializationNodes, but that need not always be true. A proxy is free to create whatever child nodes it wants and store information in them using whatever organization is most convenient.</para><para>Each <ref refid="classOpenMM_1_1SerializationNode" kindref="compound">SerializationNode</ref> can store an arbitrary set of &quot;properties&quot;, represented as key-value pairs. The key is always a string, while the value may be a string, an int, or a double. If a value is specified using one data type and then accessed as a different data type, the node will attempt to convert the value in an appropriate way. For example, it is always reasonable to call <ref refid="classOpenMM_1_1SerializationNode_1a4a7748a8b334970023b22dd24dd3a943" kindref="member">getStringProperty()</ref> to access a property as a string. Similarly, you can use <ref refid="classOpenMM_1_1SerializationNode_1ab7c1b2f63a936c5bfd6b8282387936ef" kindref="member">setStringProperty()</ref> to specify a property and then access it using <ref refid="classOpenMM_1_1SerializationNode_1aa8a256ca9a681010ad612b0e98281330" kindref="member">getIntProperty()</ref>. This will produce the expected result if the original value was, in fact, the string representation of an int, but if the original string was non-numeric, the result is undefined. </para>    </detaileddescription>
    <location file="/home/rmcgibbo/OpenMM5.0-Source/serialization/include/openmm/serialization/SerializationNode.h" line="67" bodyfile="/home/rmcgibbo/OpenMM5.0-Source/serialization/include/openmm/serialization/SerializationNode.h" bodystart="67" bodyend="225"/>
    <listofallmembers>
      <member refid="classOpenMM_1_1SerializationNode_1a4a094ba7f372257a8919573ca83599e5" prot="private" virt="non-virtual"><scope>OpenMM::SerializationNode</scope><name>children</name></member>
      <member refid="classOpenMM_1_1SerializationNode_1a8cd28cb1637d6347438e46a6122bd1af" prot="public" virt="non-virtual"><scope>OpenMM::SerializationNode</scope><name>createChildNode</name></member>
      <member refid="classOpenMM_1_1SerializationNode_1a7b6840a9c320a7f44f10bd8f7bbbcd8a" prot="public" virt="non-virtual"><scope>OpenMM::SerializationNode</scope><name>createChildNode</name></member>
      <member refid="classOpenMM_1_1SerializationNode_1a26c70a738d948aa14d02c0ab8b5ef86b" prot="public" virt="non-virtual"><scope>OpenMM::SerializationNode</scope><name>decodeObject</name></member>
      <member refid="classOpenMM_1_1SerializationNode_1a580548cc82487cadee365c1583d3f980" prot="public" virt="non-virtual"><scope>OpenMM::SerializationNode</scope><name>getChildNode</name></member>
      <member refid="classOpenMM_1_1SerializationNode_1a68794ac3f4d0aff826d7dcfb38faf289" prot="public" virt="non-virtual"><scope>OpenMM::SerializationNode</scope><name>getChildNode</name></member>
      <member refid="classOpenMM_1_1SerializationNode_1a7ce9dddfca49970a368217d782740dbf" prot="public" virt="non-virtual"><scope>OpenMM::SerializationNode</scope><name>getChildren</name></member>
      <member refid="classOpenMM_1_1SerializationNode_1abfce47d99c0a3db743ac762910269632" prot="public" virt="non-virtual"><scope>OpenMM::SerializationNode</scope><name>getChildren</name></member>
      <member refid="classOpenMM_1_1SerializationNode_1a79508cdfb45a9c65ecb4baa4d2413ce7" prot="public" virt="non-virtual"><scope>OpenMM::SerializationNode</scope><name>getDoubleProperty</name></member>
      <member refid="classOpenMM_1_1SerializationNode_1afdded9db4392fbe16e4b8bb07c98b7e7" prot="public" virt="non-virtual"><scope>OpenMM::SerializationNode</scope><name>getDoubleProperty</name></member>
      <member refid="classOpenMM_1_1SerializationNode_1aa8a256ca9a681010ad612b0e98281330" prot="public" virt="non-virtual"><scope>OpenMM::SerializationNode</scope><name>getIntProperty</name></member>
      <member refid="classOpenMM_1_1SerializationNode_1a8fef8c00a1bf99f8ce99fa2ef798d306" prot="public" virt="non-virtual"><scope>OpenMM::SerializationNode</scope><name>getIntProperty</name></member>
      <member refid="classOpenMM_1_1SerializationNode_1a2b4a293e5c58261bc1d5a98678193a8c" prot="public" virt="non-virtual"><scope>OpenMM::SerializationNode</scope><name>getName</name></member>
      <member refid="classOpenMM_1_1SerializationNode_1a20f3420eda88506cfc718d79fc72abcf" prot="public" virt="non-virtual"><scope>OpenMM::SerializationNode</scope><name>getProperties</name></member>
      <member refid="classOpenMM_1_1SerializationNode_1a4a7748a8b334970023b22dd24dd3a943" prot="public" virt="non-virtual"><scope>OpenMM::SerializationNode</scope><name>getStringProperty</name></member>
      <member refid="classOpenMM_1_1SerializationNode_1ad418a0a871e724c9a0058b378f54eef8" prot="public" virt="non-virtual"><scope>OpenMM::SerializationNode</scope><name>getStringProperty</name></member>
      <member refid="classOpenMM_1_1SerializationNode_1ab87e408327c854ee59601ca1849049d4" prot="public" virt="non-virtual"><scope>OpenMM::SerializationNode</scope><name>hasProperty</name></member>
      <member refid="classOpenMM_1_1SerializationNode_1a1464f81416e0198d5dbdbe797a9e7b4e" prot="private" virt="non-virtual"><scope>OpenMM::SerializationNode</scope><name>name</name></member>
      <member refid="classOpenMM_1_1SerializationNode_1a28651cda43285820f0bc7ba90afae20f" prot="private" virt="non-virtual"><scope>OpenMM::SerializationNode</scope><name>properties</name></member>
      <member refid="classOpenMM_1_1SerializationNode_1a434ed1c3d10d141a9af26edf70a39252" prot="public" virt="non-virtual"><scope>OpenMM::SerializationNode</scope><name>setDoubleProperty</name></member>
      <member refid="classOpenMM_1_1SerializationNode_1a80ae9475ab08f6b101c4ef061514d7d4" prot="public" virt="non-virtual"><scope>OpenMM::SerializationNode</scope><name>setIntProperty</name></member>
      <member refid="classOpenMM_1_1SerializationNode_1a6b53c72513bb4a5e0a68d2031361d0f4" prot="public" virt="non-virtual"><scope>OpenMM::SerializationNode</scope><name>setName</name></member>
      <member refid="classOpenMM_1_1SerializationNode_1ab7c1b2f63a936c5bfd6b8282387936ef" prot="public" virt="non-virtual"><scope>OpenMM::SerializationNode</scope><name>setStringProperty</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
